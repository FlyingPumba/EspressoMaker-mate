import java.util.regex.Matcher
import java.util.regex.Pattern

plugins {
    id 'com.android.application'
}

android {
    compileSdkVersion 32

    defaultConfig {
        applicationId "org.mate.representation"
        minSdkVersion 21
        targetSdkVersion 32
        versionCode 1
        versionName "1.0"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }

    buildFeatures {
        // Compose Build Feature allow us to perform actions over semantics nodes
        // and other compose classes.
        compose true
    }

    buildTypes {
        debug {
            def targetPackageName = project.hasProperty('targetPackage') ? project.property('targetPackage') : 'not-provided'
            buildConfigField "String", "TARGET_PACKAGE_NAME", "\"${targetPackageName}\""
        }
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
}

dependencies {
    androidTestImplementation project(path: ':commons')

    implementation 'androidx.appcompat:appcompat:1.4.1'
    implementation 'com.google.android.material:material:1.5.0'

    // Compose dependencies
    implementation 'androidx.compose.ui:ui:1.2.1'
    implementation 'androidx.lifecycle:lifecycle-common-java8:2.5.1'

    // Core library
    androidTestImplementation 'androidx.test:core:1.4.0'

    // AndroidJUnitRunner and JUnit Rules
    androidTestImplementation 'androidx.test:runner:1.4.0'
    androidTestImplementation 'androidx.test:rules:1.4.0'

    implementation 'androidx.recyclerview:recyclerview:1.2.1'

    // Assertions
    androidTestImplementation 'androidx.test.ext:junit:1.1.3'

    // Espresso dependencies
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.4.0'
    androidTestImplementation 'androidx.test.espresso:espresso-contrib:3.4.0'
    androidTestImplementation 'androidx.test.espresso:espresso-intents:3.4.0'
    androidTestImplementation 'androidx.test.espresso:espresso-accessibility:3.4.0'
    androidTestImplementation 'androidx.test.espresso:espresso-web:3.4.0'
    androidTestImplementation 'androidx.test.espresso.idling:idling-concurrent:3.4.0'
    androidTestImplementation 'androidx.test.espresso:espresso-idling-resource:3.4.0'

    // For using UiAutomator in tests
    androidTestImplementation 'androidx.test.uiautomator:uiautomator:2.2.0'
}

// The following is to fix the targetPackage in the AndroidManifest, after Gradle changes it automatically..
// More info: https://stackoverflow.com/a/56311427/2271834
// Code inspired by: https://gist.github.com/VladSumtsov/63e684a4524489b8eb5b5240a1cf2c86
// And: https://stackoverflow.com/a/56649620/2271834 or https://stackoverflow.com/a/64126216/2271834
// And looking at the Android Gradle Plugin source code: https://github.com/guptadeepanshu/agp-sources
android.applicationVariants.all { variant ->
    println "Configuring variant ${variant.name}"
    variant.outputs.each { variantOutput ->
        def processorTask = variantOutput.processManifestProvider.get()
        processorTask.doLast { task ->
            def outputDirectory = task.getMultiApkManifestOutputDirectory().get()
            File manifestOutFile = file("$outputDirectory/AndroidManifest.xml")

            def targetPackageName = project.hasProperty('targetPackage') ? project.property('targetPackage') : 'not-provided'
            replaceTargetInstrumentationPackageInManifest(manifestOutFile, "org.mate.representation", targetPackageName)

        }
    }
}

android.testVariants.all { variant ->
    println "Configuring variant ${variant.name}"
    variant.outputs.each { variantOutput ->
        def processorTask = variantOutput.processManifestProvider.get()
        processorTask.doLast { task ->
            def outputDirectory = task.getPackagedManifestOutputDirectory().get()
            File manifestOutFile = file("$outputDirectory/AndroidManifest.xml")

            def targetPackageName = project.hasProperty('targetPackage') ? project.property('targetPackage') : 'not-provided'
            replaceTargetInstrumentationPackageInManifest(manifestOutFile, "org.mate.representation", targetPackageName)
        }
    }
}

def replaceTargetInstrumentationPackageInManifest(File manifestFile, String currentPackage, String targetPackage) {
    println "Replacing target instrumentation package in manifest: ${manifestFile.getAbsolutePath()}"

    String content = manifestFile.getText('UTF-8')

    Pattern fullBlockPattern = Pattern.compile("<instrumentation.*?</instrumentation>", Pattern.DOTALL | Pattern.MULTILINE)
    content = replaceContentInPattern(fullBlockPattern, content, currentPackage, targetPackage)
    manifestFile.write(content, 'UTF-8')

    Pattern shortBlockPattern = Pattern.compile("<instrumentation.*?/>", Pattern.DOTALL | Pattern.MULTILINE)
    content = replaceContentInPattern(shortBlockPattern, content, currentPackage, targetPackage)
    manifestFile.write(content, 'UTF-8')
}

def replaceContentInPattern(Pattern pattern, String content, String oldString, String newString) {
    Matcher matcher = pattern.matcher(content)
    if (matcher.find()) {
        String groupString = matcher.group()
        groupString = groupString.replaceAll(oldString, newString)
        content = pattern.matcher(content).replaceAll(groupString);
    }
    content
}